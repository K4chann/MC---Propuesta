import matplotlib.pyplot as plt
import numpy as np
import matplotlib.animation as animation
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from tkinter import *

# Definición de los gráficos y de las cónicas en ellos.

fig, ax = plt.subplots()                  # Varios gráficos definibles.
plt.title("Gráfica con su recta tangente en (4, 8)", color = "black", size = 16, family = "Arial")

# Definición del intervalo del gráfico, párabola, recta tangente y auxiliares.

x = np.linspace(-20, 20, 100)                    # Intervalo del cálculo de la parábola.
y = (x**2) / 2                                   # Ecuación de la parábola.
recta_tangente = 4 * x - 8                       # Ecuacuión de la recta tangente.
point = np.linspace(3, 5)                        # Punto e intervalo del recorredor de la cónica entre x = 3 y x = 5.
scat = ax.scatter(1, 0)                          # Scatter de la animación del punto.

ax.plot(x, y, linewidth = 2.0)                   # Definición de la parábola en el gráfico.
ax.plot(x, recta_tangente, linewidth = 2.0)      # Definición de la recta tangente a la parábola en (4, 8).
ax.plot(3, (3**2) / 2, "ro", linewidth = 2.0)    # Punto inicial del intervalo.
ax.plot(5, (5**2) / 2, "ro", linewidth = 2.0)    # Punto final del intervalo.
ax.axis([-20, 20, -2, 30])                       # Intervalo del eje mostrable.

def animate(i):
       """Función encargada de variar los distintos valores del punto animado."""
       scat.set_offsets((i, (i**2) / 2))
       return scat

ani = animation.FuncAnimation(fig, animate, repeat=True, frames=point, interval=100)  # Objeto animador del movimiento del punto.

# Creación de la GUI.

ventana = Tk()                                                        # Definición del objeto ventana.
ventana.geometry("1000x1000")                                         # Ajuste del tamaño de la ventana.
ventana.title("Reto de Matemáticas Computacionales")                  # Título de la ventana.
ventana.minsize(width = 1000, height = 1000)                          # Ajuste del tamaño mínimo de la ventana.

frame = Frame(ventana, bg = "white", bd = 3)                          # Soporte para el visualizador gráfico.
frame.pack(expand = 1, fill = "both")                                 # Ajustando el soporte dentro de la ventana.

canvas = FigureCanvasTkAgg(fig, master = frame)                       # Definición de un canvas en la ventana.
canvas.get_tk_widget().pack(padx=5, pady=5, expand=1, fill="both")    # Ajuste del canvas dentro de la ventana.

ventana.mainloop()
